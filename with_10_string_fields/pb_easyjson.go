// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package with_10_string_fields

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5fcf962eDecodeGithubComJsonIteratorGoBenchmarkWith10StringFields(in *jlexer.Lexer, out *PbTestObject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Field1":
			out.Field1 = string(in.String())
		case "Field2":
			out.Field2 = string(in.String())
		case "Field3":
			out.Field3 = string(in.String())
		case "Field4":
			out.Field4 = string(in.String())
		case "Field5":
			out.Field5 = string(in.String())
		case "Field6":
			out.Field6 = string(in.String())
		case "Field7":
			out.Field7 = string(in.String())
		case "Field8":
			out.Field8 = string(in.String())
		case "Field9":
			out.Field9 = string(in.String())
		case "Field10":
			out.Field10 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5fcf962eEncodeGithubComJsonIteratorGoBenchmarkWith10StringFields(out *jwriter.Writer, in PbTestObject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Field1\":"
		out.RawString(prefix[1:])
		out.String(string(in.Field1))
	}
	{
		const prefix string = ",\"Field2\":"
		out.RawString(prefix)
		out.String(string(in.Field2))
	}
	{
		const prefix string = ",\"Field3\":"
		out.RawString(prefix)
		out.String(string(in.Field3))
	}
	{
		const prefix string = ",\"Field4\":"
		out.RawString(prefix)
		out.String(string(in.Field4))
	}
	{
		const prefix string = ",\"Field5\":"
		out.RawString(prefix)
		out.String(string(in.Field5))
	}
	{
		const prefix string = ",\"Field6\":"
		out.RawString(prefix)
		out.String(string(in.Field6))
	}
	{
		const prefix string = ",\"Field7\":"
		out.RawString(prefix)
		out.String(string(in.Field7))
	}
	{
		const prefix string = ",\"Field8\":"
		out.RawString(prefix)
		out.String(string(in.Field8))
	}
	{
		const prefix string = ",\"Field9\":"
		out.RawString(prefix)
		out.String(string(in.Field9))
	}
	{
		const prefix string = ",\"Field10\":"
		out.RawString(prefix)
		out.String(string(in.Field10))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PbTestObject) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5fcf962eEncodeGithubComJsonIteratorGoBenchmarkWith10StringFields(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PbTestObject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5fcf962eEncodeGithubComJsonIteratorGoBenchmarkWith10StringFields(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PbTestObject) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5fcf962eDecodeGithubComJsonIteratorGoBenchmarkWith10StringFields(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PbTestObject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5fcf962eDecodeGithubComJsonIteratorGoBenchmarkWith10StringFields(l, v)
}
